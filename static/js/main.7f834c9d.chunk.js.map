{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","getUserPosts","userId","a","fetch","response","ok","Error","statusText","json","posts","console","log","PostsList","React","memo","selectedUserId","selectedPostId","setSelectedPostId","setPost","useState","setPosts","getPosts","useCallback","postsFromServer","useEffect","className","map","post","title","id","type","onClick","getPostComments","postId","createPostComments","comment","method","body","JSON","stringify","headers","newComment","deletePostComments","NewCommentForm","getComments","name","email","setComment","createComments","handleSubmission","event","preventDefault","onSubmit","placeholder","value","onChange","prevState","target","required","PostDetails","comments","setComments","hideComments","setHideComments","deleteComment","commentsFromServer","updateComments","length","getUsers","users","slice","App","setSelectedUserId","setUsers","getUsersFromServer","Number","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f834c9d.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport async function getUserPosts(userId: number) {\n  try {\n    const response = await fetch(`${BASE_URL}/posts${userId === 0 ? '' : `?userId=${userId}`}`);\n\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n\n    const posts = await response.json();\n\n    return posts;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n\n  return null;\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\ninterface Props {\n  selectedUserId: number;\n  selectedPostId: number;\n  setSelectedPostId: (selectedPostId: number) => void;\n  setPost: (post: Post | null) => void;\n}\n\nexport const PostsList: React.FC<Props>\n  = React.memo(\n    ({\n      selectedUserId,\n      selectedPostId,\n      setSelectedPostId,\n      setPost,\n    }) => {\n      const [posts, setPosts] = useState<Post[]>([]);\n\n      const getPosts = useCallback(\n        async (userId: number) => {\n          const postsFromServer = await getUserPosts(userId);\n\n          setPosts(postsFromServer);\n        },\n        [posts],\n      );\n\n      useEffect(() => {\n        getPosts(selectedUserId);\n      }, [selectedUserId]);\n\n      return (\n        <div className=\"PostsList\">\n          <h2>Posts:</h2>\n\n          <ul\n            className=\"PostsList__list\"\n            data-cy=\"postDetails\"\n          >\n            {posts && (posts.map(post => (\n              <li\n                className=\"PostsList__item\"\n                key={post.id}\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n\n                {selectedPostId === post.id\n                  ? (\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button\"\n                      onClick={() => {\n                        setSelectedPostId(0);\n                        setPost(null);\n                      }}\n                    >\n                      Close\n                    </button>\n                  )\n                  : (\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button\"\n                      onClick={() => {\n                        setSelectedPostId(post.id);\n                        setPost(post);\n                      }}\n                    >\n                      Open\n                    </button>\n                  )}\n              </li>\n            )))}\n          </ul>\n        </div>\n      );\n    },\n  );\n","import { BASE_URL } from './api';\n\nexport async function getPostComments(postId: number): Promise<Comment[]> {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n}\n\nexport async function createPostComments(comment: NewComment) {\n  try {\n    const response = await fetch(`${BASE_URL}/comments`, {\n      method: 'POST',\n      body: JSON.stringify(comment),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    });\n\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n\n    const newComment = await response.json();\n\n    return newComment;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n\n  return null;\n}\n\nexport async function deletePostComments(id: number) {\n  return fetch(`${BASE_URL}/comments/${id}`, {\n    method: 'DELETE',\n  });\n}\n","import React, { useCallback, useState } from 'react';\nimport { createPostComments } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number;\n  getComments: (id: number) => Promise<void>;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  getComments,\n}) => {\n  const [comment, setComment] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const createComments = async (newComment: NewComment) => {\n    await createPostComments(newComment);\n  };\n\n  const handleSubmission = useCallback(\n    async (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      const newComment = {\n        ...comment,\n        postId,\n      };\n\n      await createComments(newComment);\n      await getComments(postId);\n\n      setComment({\n        name: '',\n        email: '',\n        body: '',\n      });\n    },\n    [],\n  );\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        handleSubmission(event);\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={comment.name}\n          onChange={event => {\n            setComment(prevState => ({\n              ...prevState,\n              name: event.target.value,\n            }));\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={comment.email}\n          onChange={event => {\n            setComment(prevState => ({\n              ...prevState,\n              email: event.target.value,\n            }));\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment.body}\n          onChange={event => {\n            setComment(prevState => ({\n              ...prevState,\n              body: event.target.value,\n            }));\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { deletePostComments, getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostDetails: React.FC<Props> = React.memo(\n  ({ post }) => {\n    const [comments, setComments] = useState<Comment[] | null>(null);\n    const [hideComments, setHideComments] = useState(false);\n\n    const deleteComment = async (id: number) => {\n      await deletePostComments(id);\n    };\n\n    const getComments = useCallback(\n      async (postId: number) => {\n        const commentsFromServer = await getPostComments(postId);\n\n        setComments(commentsFromServer);\n      },\n      [comments],\n    );\n\n    const updateComments = async (id: number, postId: number) => {\n      await deleteComment(id);\n      await getComments(postId);\n    };\n\n    useEffect(() => {\n      getComments(post.id);\n    }, [post]);\n\n    return (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{post.body}</p>\n        </section>\n\n        <section className=\"PostDetails__comments\">\n\n          <button\n            type=\"button\"\n            className=\"button button--pb\"\n            onClick={() => {\n              if (comments?.length !== 0) {\n                setHideComments(!hideComments);\n              }\n            }}\n          >\n            {`${hideComments ? 'Show' : 'Hide'} ${comments?.length} comments`}\n          </button>\n\n          {hideComments || (\n            <ul\n              className=\"PostDetails__list\"\n              data-cy=\"postDetails\"\n            >\n              {comments?.map(comment => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comment.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      updateComments(comment.id, post.id);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              postId={post.id}\n              getComments={getComments}\n            />\n          </div>\n        </section>\n      </div>\n    );\n  },\n);\n","import { BASE_URL } from './api';\n\nexport const getUsers = async (): Promise<User[]> => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/`);\n\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n\n    const users = await response.json();\n\n    return users.slice(0, 10);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n\n  return [];\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [post, setPost] = useState<Post | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n\n  const getUsersFromServer = useCallback(\n    async () => {\n      const response = await getUsers();\n\n      setUsers(response);\n    },\n    [users],\n  );\n\n  useEffect(() => {\n    getUsersFromServer();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={event => {\n              setSelectedUserId(Number(event.target.value));\n            }}\n          >\n            <option value=\"0\">All users</option>\n\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n            setPost={setPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {post === null\n            ? <h2>Post details</h2>\n            : <PostDetails post={post} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}