{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","getUserPosts","userId","a","fetch","response","ok","Error","statusText","json","posts","console","log","PostsList","selectedUserId","selectedPostId","setSelectedPostId","setPost","useState","setPosts","getPosts","postsFromServer","useEffect","className","map","post","title","id","type","onClick","getPostComments","postId","createPostComments","comment","method","body","JSON","stringify","headers","newComment","deletePostComments","NewCommentForm","getComments","commentName","setCommentName","commentEmail","setCommentEmail","commentBody","setCommentBody","createComments","handleSubmission","event","preventDefault","name","email","onSubmit","placeholder","value","onChange","target","required","PostDetails","comments","setComments","hideComments","setHideComments","deleteComment","commentsFromS","updateComments","length","getUsers","App","setSelectedUserId","users","setUsers","getUsersFromServer","Number","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9ffc714.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport async function getUserPosts(userId: number) {\n  try {\n    const response = await fetch(`${BASE_URL}/posts${userId === 0 ? '' : `?userId=${userId}`}`);\n\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n\n    const posts = await response.json();\n\n    return posts;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n\n  return null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\ninterface Props {\n  selectedUserId: number;\n  selectedPostId: number;\n  setSelectedPostId: (selectedPostId: number) => void;\n  setPost: (post: Post | null) => void;\n}\n\nexport const PostsList: React.FC<Props>\n  = ({\n    selectedUserId,\n    selectedPostId,\n    setSelectedPostId,\n    setPost,\n  }) => {\n    const [posts, setPosts] = useState<Post[]>([]);\n\n    const getPosts = async (userId: number) => {\n      const postsFromServer = await getUserPosts(userId);\n\n      setPosts(postsFromServer);\n    };\n\n    useEffect(() => {\n      getPosts(selectedUserId);\n    }, [selectedUserId]);\n\n    return (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n\n        <ul\n          className=\"PostsList__list\"\n          data-cy=\"postDetails\"\n        >\n          {posts && (posts.map(post => (\n            <li\n              className=\"PostsList__item\"\n              key={post.id}\n            >\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n\n              {selectedPostId === post.id\n                ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      setSelectedPostId(0);\n                      setPost(null);\n                    }}\n                  >\n                    Close\n                  </button>\n                )\n                : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      setSelectedPostId(post.id);\n                      setPost(post);\n                    }}\n                  >\n                    Open\n                  </button>\n                )}\n            </li>\n          )))}\n        </ul>\n      </div>\n    );\n  };\n","import { BASE_URL } from './api';\n\nexport async function getPostComments(postId: number): Promise<Comment[]> {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n}\n\nexport async function createPostComments(comment: NewComment) {\n  try {\n    const response = await fetch(`${BASE_URL}/comments`, {\n      method: 'POST',\n      body: JSON.stringify(comment),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    });\n\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n\n    const newComment = await response.json();\n\n    return newComment;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n\n  return null;\n}\n\nexport async function deletePostComments(id: number) {\n  return fetch(`${BASE_URL}/comments/${id}`, {\n    method: 'DELETE',\n  });\n}\n","import React, { useState } from 'react';\nimport { createPostComments } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number;\n  getComments: (id: number) => Promise<void>;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  getComments,\n}) => {\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  const createComments = async (comment: NewComment) => {\n    await createPostComments(comment);\n  };\n\n  const handleSubmission = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = {\n      name: commentName,\n      email: commentEmail,\n      body: commentBody,\n      postId,\n    };\n\n    await createComments(newComment);\n    await getComments(postId);\n\n    setCommentName('');\n    setCommentEmail('');\n    setCommentBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        handleSubmission(event);\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={commentName}\n          onChange={event => {\n            setCommentName(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={commentEmail}\n          onChange={event => {\n            setCommentEmail(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentBody}\n          onChange={event => {\n            setCommentBody(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deletePostComments, getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [hideComments, setHideComments] = useState(false);\n\n  const deleteComment = async (id: number) => {\n    await deletePostComments(id);\n  };\n\n  const getComments = async (postId: number) => {\n    const commentsFromS = await getPostComments(postId);\n\n    setComments(commentsFromS);\n  };\n\n  const updateComments = async (id: number, postId: number) => {\n    await deleteComment(id);\n    await getComments(postId);\n  };\n\n  useEffect(() => {\n    getComments(post.id);\n  }, [post]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n\n        <button\n          type=\"button\"\n          className=\"button button--pb\"\n          onClick={() => {\n            if (comments?.length !== 0) {\n              setHideComments(!hideComments);\n            }\n          }}\n        >\n          {`${hideComments ? 'Show' : 'Hide'} ${comments?.length} comments`}\n        </button>\n\n        {hideComments || (\n          <ul\n            className=\"PostDetails__list\"\n            data-cy=\"postDetails\"\n          >\n            {comments?.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    updateComments(comment.id, post.id);\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={post.id}\n            getComments={getComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/`);\n\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n\n    return await response.json();\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n\n  return null;\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [post, setPost] = useState<Post | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n\n  const getUsersFromServer = async () => {\n    const response = await getUsers();\n\n    setUsers(response);\n  };\n\n  useEffect(() => {\n    getUsersFromServer();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={event => {\n              setSelectedUserId(Number(event.target.value));\n            }}\n          >\n            <option value=\"0\">All users</option>\n\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n            setPost={setPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {post === null\n            ? <h2>Post details</h2>\n            : <PostDetails post={post} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}